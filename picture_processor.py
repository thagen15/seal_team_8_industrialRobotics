import cv2
import numpy as np
import math
from enum import Enum
from PointPair import PointPair

pointPair=[]
class PictureToLine:
    """
    An OpenCV pipeline generated by GRIP.
    """

    def __init__(self):
        """initializes all values to presets or None if need to be set
        """
        self.__resize_image_width = 640
        self.__resize_image_height = 480
        self.__resize_image_interpolation = cv2.INTER_CUBIC

        self.resize_image_output = None
        self.__find_lines_input = self.resize_image_output
        self.find_lines_output = None


    def process(self, source0):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step Resize_Image0:
        self.__resize_image_input = source0
        (self.resize_image_output) = self.__resize_image(self.__resize_image_input, self.__resize_image_width, self.__resize_image_height, self.__resize_image_interpolation)

        # Step Find_Lines0:
        self.__find_lines_input = self.resize_image_output
        (self.find_lines_output) = self.__find_lines(self.__find_lines_input)

    @staticmethod
    def __resize_image(input, width, height, interpolation):
        """Scales and image to an exact size.
        Args:
            input: A numpy.ndarray.
            Width: The desired width in pixels.
            Height: The desired height in pixels.
            interpolation: Opencv enum for the type fo interpolation.
        Returns:
            A numpy.ndarray of the new size.
        """
        return cv2.resize(input, ((int)(width), (int)(height)), 0, 0, interpolation)


    class Line:

        def __init__(self, x1, y1, x2, y2):
            self.x1 = x1
            self.y1 = y1
            self.x2 = x2
            self.y2 = y2
            self.points = PointPair(x1,x2,y1,y2)

        def length(self):
            return numpy.sqrt(pow(self.x2 - self.x1, 2) + pow(self.y2 - self.y1, 2))

        def angle(self):
            return math.degrees(math.atan2(self.y2 - self.y1, self.x2 - self.x1))
    @staticmethod
    def __find_lines(input):
        """Finds all line segments in an image.
        Args:
            input: A numpy.ndarray.
        Returns:
            A filtered list of Lines.
        """
        detector = cv2.createLineSegmentDetector()
        if (len(input.shape) == 2 or input.shape[2] == 1):
            lines = detector.detect(input)
        else:
            tmp = cv2.cvtColor(input, cv2.COLOR_BGR2GRAY)
            lines = detector.detect(tmp)
        output = []
        lineSegments = 0
        if len(lines) != 0:
            for i in range(1, len(lines[0])):
                tmp = PictureToLine.Line(lines[0][i, 0][0], lines[0][i, 0][1],
                                lines[0][i, 0][2], lines[0][i, 0][3])
                pointPair.append(tmp.points)
                output.append(tmp)
                lineSegments +=1

        pointPair.reverse
        img = np.zeros((480,640,3), np.uint8)

        for pair in pointPair:
            cv2.line(img,pair.getPoint1(),pair.getPoint2(),(50,205,50),1)
            cv2.imshow('img',img)
            cv2.waitKey(1)
        print "There are ",lineSegments," line segments in the picture"
        cv2.waitKey(0)
        cv2.destroyAllWindows()

        return pointPair
